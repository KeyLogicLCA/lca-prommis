This document includes the development notes of the PrOMMiS LCA Integration code

The flow includes 5 main tasks:
1- Extract inputs/outputs from PrOMMiS 
2- Communicate PrOMMiS resuts with openLCA
3- Run openLCA model 
4- Extract openLCA results
5- Pass openLCA results to PrOMMiS

Step 1: Extract inputs/outputs from PrOMMiS
--------------------------------------------

    Step 1.1: Identify all LCA-relevant flows in the UKy PrOMMiS flowsheet
    ======================================================================



    Step 1.2: Extract all flows/parameters and structure them in a dataframe 
    =========================================================================


The end goal of this step is to have all relevant flows structured as follow:

| Flow_ID | Flow        | In/Out |   Category   | Amount 1 | Unit 1 | Amount 2 | Unit 2 | 
|---------|-------------|--------|--------------|----------|--------|----------|--------|
|    1    | Pump power  |   In   |  Electricity |  12      | kW     |          |        |
|    2    | Li product  |   Out  |  Product     |  136     | kg/hr  |          |        |
|    3    | Feed - MatX |   In   |  Material    |  100     | m3/hr  |  1.7     | kg/m3  |
...


Step 2: Communicate PrOMMiS results with openLCA
------------------------------------------------

    Step 2.1: Develop function to convert PrOMMiS results to LCA-relvant results
    ============================================================================
    Step 2.2: Develop function that evaluates PrOMMiS flows and converts them to LCA-relevant flows normalized to selected FU
    =========================================================================================================================

    | Category         | PrOMMiS Unit | LCA-relevant Unit | Function Developed? |
    |------------------|--------------|-------------------|---------------------|
    | Energy           | hp           | kWh               |                     |
    | Energy           | kW           | kWh               |Yes                  |
    | Water/Wastewater | m3/hour      | m3, Liters        |Yes                  | 
    | Materials        | m3/hr + kg/m3| kg                |Yes                  |
    | Chemicals        | m3/hr + kg/m3| kg                |                     |
    | Heat             |              | MJ                |                     |
    | Solid Waste      |              | kg                |                     |   
    | Solid Products   | kg/hour      | kg                |Yes                  |

    The code for steps 2.1 and 2.2 is saved under module "prommis_LCA_conversions.py" (src/prommis_LCA_conversions.py)
    The code includes three main sections
        Section 1: conversion functions using basic mathematical equations to covert prommis to LCA units
        Section 2: a library that includes the different flow categories available in prommis along with the associated unit, target LCA unit, and required function to convert it
        Section 3: a function that loops through the DF from Step 1, identifies each flow, and uses the right function to convert it to LCA-relevant units

    Step 2.3: Pass converted PrOMMiS outputs to openLCA 
    ===================================================

    The code in this step involves several steps that mimic the process creation in openLCA
    1- Use olca ipc to connect to openLCA
    2- Create a new unit process and prompt the user to enter its metadata (e.g., name, description, etc.)
    3- Read the dataframe produced in steps 2.1 and 2.2
    4- A function loops through the dataframe row by row and for each row creates a flow to be entered in the unit process
       Creating flows involves:
            a- determining if its a technosphere flow or an elementary flow     >> The user should determine that
            b- Selecting a unit process to model this flow                      >> The user enters keywords --> query to search the database --> return possible matches --> user selects a match
            c- Setting the unit                                                 >> The unit is read from the provided dataframe --> if the unit is not available --> user selects one of the available units
            d- Setting the flow value/amount                                    >> the flow value/amount is retrieved from the provided dataframe

    The end goal of this step is to create a process 

    TODO: 
    # Adjust addition of reference product 
    # Improve search function
    # Save an instance of the user selection for future iterations
    # Give the user the option to change keywords (after getting the results)
    # Continue revising current code to use netlolca library or create new functions for netlolca library
    # Adjust code logic
        Final Logic
            1- Read dataframe with finalized LCA flows
            2- search for reference product (Reference_Product == True)
            3- Create 1st exchange --> reference product
            4- Loop through remaining rows of df and for each row 
                4.1 - Prompt user for flow type: product, elementary, waste
                4.2 - Prompt user for keyword
                4.3 - User selects flow
                4.4 - User selects unit


        Main functions needed
        1- Function to connect to openLCA -- client = initialize_client()
        2- Function that creates new flows (for reference product) to be used as an exchange in a unit process
        3- Function to read openLCA database + query existing flows/processes based on user keyword
        4- Function that reads and reports available units for a specific flow
        5- Function that adds a new exchange given a process uuid, name, amount ,and unit
        6- Function that creates new unit process given
            Process name
            Process description
            Reference product information
            exchanges information

        Support functions needed:
        1- Function to read/validate df 
        2- Function that generates uuid

Step 3: Run openLCA model
-------------------------




Step 4: Extract openLCA results
-------------------------------





Step 5: Pass openLCA results to PrOMMiS
---------------------------------------
